generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Learner {
    id       String  @id @unique @db.VarChar(20)
    nickname String  @db.VarChar(15)
    password String
    email    String?
    phone    String? @db.VarChar(11)
    avatar   String?
    intro    String? @db.VarChar(30)

    Info  Info[]
    Point Point[]
    Chunk Chunk[]
    Tree  Tree[]

    Explain  Explain[]
    Exercise Exercise[]

    Feedback Feedback[]
    Reply    Reply[]
    Replied  Reply[]    @relation("receiver")
    Like     Like[]

    FollowTargets Follow[] @relation("followTarget")
    Followers     Follow[] @relation("follower")
}

model Info {
    id       Int     @id @default(autoincrement())
    content  String  @db.Text
    isRefine Boolean @default(false)

    isDel      Boolean  @default(false)
    Author     Learner? @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    authorId   String   @db.VarChar(20)
    createTime DateTime @default(now())
    updateTime DateTime @updatedAt
}

model Point {
    id       Int     @id @default(autoincrement())
    name     String  @db.VarChar(50)
    content  String  @db.Text
    isRefine Boolean @default(false)

    isDel      Boolean  @default(false)
    Author     Learner? @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    authorId   String   @db.VarChar(20)
    createTime DateTime @default(now())
    updateTime DateTime @updatedAt

    ChunkContent ChunkContent[]
}

model Chunk {
    id       Int     @id @default(autoincrement())
    name     String  @db.VarChar(50)
    preface  String  @db.Text
    endnote  String  @db.Text
    isRefine Boolean @default(false)

    ChunkContent ChunkContent[]

    isDel      Boolean  @default(false)
    Author     Learner? @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    authorId   String   @db.VarChar(20)
    createTime DateTime @default(now())
    updateTime DateTime @updatedAt

    Node TreeNode[] @relation(name: "node")
}

model ChunkContent {
    Chunk   Chunk? @relation(fields: [chunkId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    chunkId Int
    order   Int

    Point   Point? @relation(fields: [pointId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    pointId Int

    @@id([chunkId, order])
}

model Tree {
    id       Int     @id @default(autoincrement())
    name     String  @db.VarChar(50)
    preface  String  @db.Text
    isPublic Boolean @default(false)

    isDel      Boolean  @default(false)
    Author     Learner? @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    authorId   String   @db.VarChar(20)
    createTime DateTime @default(now())
    updateTime DateTime @updatedAt

    TreeNode TreeNode[]
}

model TreeNode {
    id Int @id @default(autoincrement())

    Tree         Tree      @relation(fields: [treeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    treeId       Int
    ParentNode   TreeNode? @relation("relation", fields: [parentNodeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    parentNodeId Int?
    order        Int

    Node   Chunk @relation(name: "node", fields: [nodeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    nodeId Int

    ChildNode TreeNode[] @relation("relation")
}

model Explain {
    id       Int     @id @default(autoincrement())
    title    String  @db.VarChar(50)
    content  String  @db.Text
    isPublic Boolean @default(false)

    isDel      Boolean  @default(false)
    Author     Learner? @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    authorId   String   @db.VarChar(20)
    createTime DateTime @default(now())
    updateTime DateTime @updatedAt
}

model Exercise {
    id       Int     @id @default(autoincrement())
    question String  @db.VarChar(50)
    detail   String  @db.Text
    answer   String  @db.Text
    analysis String  @db.Text
    isRefine Boolean @default(false)

    isDel      Boolean  @default(false)
    Author     Learner? @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    authorId   String   @db.VarChar(20)
    createTime DateTime @default(now())
    updateTime DateTime @updatedAt
}

model Relate {
    targetId   Int
    targetType String
    relateId   Int
    relateType String

    createTime DateTime @default(now())

    @@id([targetId, targetType, relateId, relateType])
}

model Feedback {
    id         Int      @id @default(autoincrement())
    content    String   @db.Text
    isDel      Boolean  @default(false)
    createTime DateTime @default(now())

    targetId   Int
    targetType String

    Author   Learner? @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    authorId String   @db.VarChar(20)

    Reply Reply[]
    Likes Like[]
}

model Reply {
    id         Int      @id @default(autoincrement())
    content    String   @db.Text
    isDel      Boolean  @default(false)
    createTime DateTime @default(now())

    Feedback   Feedback @relation(fields: [feedbackId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    feedbackId Int
    RootReply  Reply?   @relation("rootReply", fields: [rootId], references: [id])
    rootId     Int?

    Receiver   Learner? @relation("receiver", fields: [receiverId], references: [id])
    receiverId String?  @db.VarChar(20)
    Author     Learner? @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    authorId   String   @db.VarChar(20)

    ChildReply Reply[] @relation("rootReply")
    Likes      Like[]
}

model Like {
    id         Int      @id @default(autoincrement())
    User       Learner? @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId     String   @db.VarChar(20)
    createTime DateTime @default(now())

    Feedbacks Feedback[]
    Replies   Reply[]
}

model Follow {
    id         Int      @id @default(autoincrement())
    createTime DateTime @default(now())

    Target     Learner @relation(name: "followTarget", fields: [targetId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    targetId   String
    Follower   Learner @relation(name: "follower", fields: [followerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    followerId String

    @@unique([targetId, followerId])
}
